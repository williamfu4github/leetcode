/*
Solution 200 - Number of Islands
iterative BFS approach
sink the land before push on queue, to ensure a land be pushed only once
DFS takes O(m * n) time, O(m * n) space
this problem have a special structure of a graph
could also use Union Find, for faster multiple queries
O(m * n) time
O(min(m, n)) space
*/

class Solution {
public:
    int numIslands(vector<vector<char>> grid) {
        if (grid.empty()) {
            return 0;
        }
        array<pair<int, int>, 4> neighbours{make_pair(-1, 0), make_pair(1, 0), make_pair(0, -1), make_pair(0, 1)};
        int rowSize = static_cast<int>(grid.size());
        int columnSize = static_cast<int>(grid[0].size());
        int count = 0;
        for (int i = 0; i < rowSize; i ++) {
            for (int j = 0; j < columnSize; j ++) {
                if (grid[i][j] == '1') {
                    count ++;
                    grid[i][j] = '0';
                    queue<pair<int, int>> explore{{make_pair(i, j)}};
                    while (!explore.empty()) {
                        for (pair<int, int> e : neighbours) {
                            int x = explore.front().first + e.first;
                            int y = explore.front().second + e.second;
                            if ((x >= 0) && (x < rowSize) && (y >= 0) && (y < columnSize) && (grid[x][y] == '1')) {
                                grid[x][y] = '0';
                                explore.push(make_pair(x, y));
                            }
                        }
                        explore.pop();
                    }
                }
            }
        }
        return count;
    }
};
