/*
Solution 23 - Merge k Sorted Lists
divide and conquer
same time efficiency as priority queue, but better space efficiency
O(nlogk) time, where n is number to total nodes, k is number of lists
O(1) space
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

class Solution {
private:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* dummyHead = new ListNode(0);
        ListNode* current = dummyHead;
        while ((l1 != NULL) && (l2 != NULL)) {
            if (l1->val <= l2->val) {
                current->next = l1;
                l1 = l1->next;
            }
            else {
                current->next = l2;
                l2 = l2->next;
            }
            current = current->next;
        }
        current->next = ((l1 == NULL) ? l2 : l1);
        return dummyHead->next;
    }
    
public:
    ListNode* mergeKLists(vector<ListNode*> lists) {
        if (lists.empty()) {
            return NULL;
        }
        int n = static_cast<int>(lists.size());
        while (n > 1) {
            for (int i = 0; i < n / 2; i ++) {
                lists[i] = this->mergeTwoLists(lists[i * 2], lists[i * 2 + 1]);
            }
            lists[n / 2] = lists[n - 1];    // redundant if n is even
            n = n / 2 + n % 2;
        }
        return lists[0];
    }
};
