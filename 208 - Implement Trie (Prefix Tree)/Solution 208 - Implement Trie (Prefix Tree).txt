/*
Solution 208 - Implement Trie (Prefix Tree)
*/

class Trie {
private:
    struct TrieNode {
    public:
        bool isEnd;
        unordered_map<char, TrieNode*> children;
        
    public:
        TrieNode() {
            isEnd = false;
        }
        
        ~TrieNode() {
            for (pair<char, TrieNode*> e : children) {
                delete e.second;
            }
        }
    };
    
private:
    TrieNode* root;
    
public:
    Trie() {
        root = new TrieNode;
    }
    
    ~Trie() {
        delete root;
    }
    
    void insert(const string& word) {
        TrieNode* current = root;
        for (char c : word) {
            if (current->children.count(c) == 0) {
                current->children[c] = new TrieNode;
            }
            current = current->children[c];
        }
        current->isEnd = true;
    }
    
    bool search(const string& word) {
        TrieNode* current = root;
        for (char c : word) {
            if (current->children.count(c) == 0) {
                return false;
            }
            current = current->children[c];
        }
        return current->isEnd;
    }
    
    bool startsWith(const string& prefix) {
        TrieNode* current = root;
        for (char c : prefix) {
            if (current->children.count(c) == 0) {
                return false;
            }
            current = current->children[c];
        }
        return true;
    }
};
