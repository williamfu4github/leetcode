/*
8 - String to Integer (atoi)
O(n) time
O(1) space
*/

class Solution {
public:
    int myAtoi(const string& str) {
        int strSize = static_cast<int>(str.size());
        int i = 0;
        while ((i < strSize) && (str[i] == ' ')) {
            i ++;
        }
        if (i == strSize) {
            return 0;
        }
        bool isPositive = true;
        if (str[i] == '+') {
            i ++;
        }
        else if (str[i] == '-') {
            isPositive = false;
            i ++;
        }
        int num = 0;
        while ((i < strSize) && std::isdigit(str[i])) {
            // a trick here, the valid INT_MIN case goes to this invalid overflow case
            if (num > ((INT_MAX - (str[i] - '0')) / 10)) {
                return (isPositive ? INT_MAX : INT_MIN);
            }
            num = num * 10 + (str[i] - '0');
            i ++;
        }
        return (isPositive ? num : -num);
    }
};
