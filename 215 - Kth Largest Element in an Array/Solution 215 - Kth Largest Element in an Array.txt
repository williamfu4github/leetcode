/*
Solution 215 - Kth Largest Element in an Array
similar to the partition used in quick sort
can use randomized pivot, or median-of-5 pivot
O(n) average time, manipulate 2n elements
O(n^2) worst time, if pivot is always smallest or largest
O(1) space, if nums is mutable
*/

class Solution {
private:
    // taking nums[start] as pivot
    // PRE: 0 <= start < numsSize
    int partition(vector<int>& nums, int start, int end) {
        int i = start + 1;
        int j = end - 1;
        while (i <= j) {
            if (nums[i] <= nums[start]) {
                i ++;
            }
            else {
                std::swap(nums[i], nums[j]);
                j --;
            }
        }
        i --;
        std::swap(nums[i], nums[start]);
        return i;
    }
    
public:
    int findKthLargest(vector<int> nums, int k) {
        int numsSize = static_cast<int>(nums.size());
        k = numsSize - k;
        // invariant: [0, i) <= [i, j) <= [j, numsSize)
        int i = 0;
        int j = numsSize;
        int pivot = this->partition(nums, i, j);
        while (pivot != k) {
            if (pivot < k) {
                i = pivot + 1;
            }
            else if (pivot > k) {
                j = pivot;
            }
            pivot = this->partition(nums, i, j);
        }
        return nums[k];
    }
};
