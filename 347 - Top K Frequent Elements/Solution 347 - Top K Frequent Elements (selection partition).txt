/*
Solution 347 - Top K Frequent Elements
selection partition approach
O(n) time
O(m) space, where m is the number of unique elements
can also use bucket sort approach
*/

class Solution {
private:
    int partition(vector<pair<int, int>>& counts, int start, int end) {
        int i = start + 1;
        int j = end - 1;
        while (i <= j) {
            if (counts[i].first >= counts[start].first) {
                i ++;
            }
            else {
                std::swap(counts[i], counts[j]);
                j --;
            }
        }
        i --;
        std::swap(counts[i], counts[start]);
        return i;
    }
    
    void rearrangeKLargest(vector<pair<int, int>>& counts, int k) {
        int countsSize = static_cast<int>(counts.size());
        k --;
        int i = 0;
        int j = countsSize;
        int pivot = this->partition(counts, i, j);
        while (pivot != k) {
            if (pivot < k) {
                i = pivot + 1;
            }
            else if (pivot > k) {
                j = pivot;
            }
            pivot = this->partition(counts, i, j);
        }
    }

public:
    vector<int> topKFrequent(const vector<int>& nums, int k) {
        unordered_map<int, int> numCount;    // <num, count>
        for (int num : nums) {
            numCount[num] ++;
        }
        vector<pair<int, int>> counts;    // <count, num>
        for (pair<int, int> e : numCount) {
            counts.push_back(make_pair(e.second, e.first));
        }
        // the algorithm used in find kth largest element in an array
        this->rearrangeKLargest(counts, k);
        vector<int> output;
        for (int i = 0; i < k; i ++) {
            output.push_back(counts[i].second);
        }
        return output;
    }
};
