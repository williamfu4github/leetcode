/*
Solution 32 - Longest Valid Parentheses
scan the string left to right then right to left
let T be any longest well-formed substring, you can only have ETE, ET(, ET), (TE, (T(, )TE, )T(, )T), where E stand for epsilon
 all these cases are covered by double scan algorithm
O(n) time, two passes
O(1) space
*/

class Solution {
public:
    int longestValidParentheses(const string& s) {
        int sSize = static_cast<int>(s.size());
        int longest = 0;
        int i = -1;
        int balance = 0;
        // left to right
        for (int j = 0; j < sSize; j ++) {
            balance += ((s[j] == '(') ? 1 : -1);
            if (balance < 0) {
                balance = 0;
                i = j;
            }
            else if (balance == 0) {
                longest = std::max(longest, j - i);
            }
        }
        // right to left
        i = sSize;
        balance = 0;
        for (int j = sSize - 1; j >= 0; j --) {
            balance += ((s[j] == ')') ? 1 : -1);
            if (balance < 0) {
                balance = 0;
                i = j;
            }
            else if (balance == 0) {
                longest = std::max(longest, i - j);
            }
        }
        return longest;
    }
};
